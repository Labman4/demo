server:
  http2:
    enabled: true
  shutdown: graceful
  port: 8443
management:
  tracing:
    enabled: ${TRACE_ENABLED:true}
spring:
  elasticsearch:
    socket-timeout: 100s
    restclient:
      sniffer:
        delay-after-failure: 100s
  security:
    oauth2:
      client:
        registration:
          spring:
            provider: spring
            client-id: ${CLIENT_ID:test}
            client-secret: ${CLIENT_SECRET:test}
            authorization-grant-type: authorization_code
            redirect-uri: ${REDIRECT_URI:http://127.0.0.1}
            scope: openid, profile
            client-name: spring
      resourceserver:
        jwt:
          jwk-set-uri: ${AUTH_URL:https://auth.elpsykongroo.com}/oauth2/jwks
  main:
    allow-bean-definition-overriding: true
  datasource:
    url: jdbc:mysql://${MYSQL_IP:mysql}:${MYSQL_PORT:3306}/demo
  data:
    elasticsearch:
      repositories:
        enabled: true
  kafka:
    bootstrap-servers: ${KAFKA_URL:kafka}
    security:
      protocol: ssl
    ssl:
      trust-store-location: ${JKS:jks}
      trust-store-password: ${JKS_PASS:pass}
    consumer:
      #      security:
      #        protocol: ssl
      auto-offset-reset: earliest
request:
  limit:
    global:
      tokens: ${GLOBAL_REQUEST_LIMIT:1000}
      duration: ${GLOBAL_REQUEST_DURATION:1}
      speed: ${GLOBAL_REQUEST_DURATION_SPEED:100}
    scope:
      tokens: ${REQUEST_LIMIT:100}
      duration: ${REQUEST_DURATION:1}
      speed: ${REQUEST_DURATION_SPEED:10}
  path:
    permit: ${PERMIT_PATH:/**}
    nonPrivate: ${PUBLIC_PATH:/}
    limit: ${LIMIT_PATH:/}
    exclude: ${EXCLUDE_PATH:/actuator}
    filter: ${FILTER_PATH:/}
  record: 
    exclude:
      path:  ${RECORD_EXCLUDE_PATH:/actuator}
      ip:  ${RECORD_EXCLUDE_IP:ip.elpsykongroo.com, elpsykongroo.com}
  header:
    ip: ${IP_HEADER:x-forward-for}
    black: ${BLACK_HEADER:x-forward-for}
    white: ${WHITE_HEADER:x-forward-for}
    record: ${RECORD_HEADER:x-forward-for}

service:
  ssl:
    ca:  ${CA_CRT}
    cert:  ${TLS_CERT}
    key:  ${TLS_KEY}
  redis:
    url: http://localhost:8379
  auth:
    url: http://localhost:9000
  es:
    nodes: localhost:9200
    user: elastic
    pass: 123456
    ssl:
      type: none
      ca: ${ES_CA_CRT:ca.crt}
      cert: ${ES_TLS_CERT:tls.crt}
      key: ${ES_TLS_KEY:tls.key}
    timeout:
      connect: ${ES_CONNECT_TIME:100}
      socket: ${ES_SOCKET_TIME:100}
